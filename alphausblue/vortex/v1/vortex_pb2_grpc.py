# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from alphausblue.vortex.v1 import vortex_pb2 as vortex_dot_v1_dot_vortex__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in vortex/v1/vortex_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VortexStub(object):
    """Vortex service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test = channel.unary_unary(
                '/blueapi.vortex.v1.Vortex/Test',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=vortex_dot_v1_dot_vortex__pb2.TestResponse.FromString,
                _registered_method=True)
        self.CreateOrg = channel.unary_unary(
                '/blueapi.vortex.v1.Vortex/CreateOrg',
                request_serializer=vortex_dot_v1_dot_vortex__pb2.CreateOrgRequest.SerializeToString,
                response_deserializer=vortex_dot_v1_dot_vortex__pb2.CreateOrgResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/blueapi.vortex.v1.Vortex/GetUser',
                request_serializer=vortex_dot_v1_dot_vortex__pb2.GetUserRequest.SerializeToString,
                response_deserializer=vortex_dot_v1_dot_vortex__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.ListPrompts = channel.unary_stream(
                '/blueapi.vortex.v1.Vortex/ListPrompts',
                request_serializer=vortex_dot_v1_dot_vortex__pb2.ListPromptsRequest.SerializeToString,
                response_deserializer=vortex_dot_v1_dot_vortex__pb2.Prompt.FromString,
                _registered_method=True)
        self.InviteUser = channel.unary_unary(
                '/blueapi.vortex.v1.Vortex/InviteUser',
                request_serializer=vortex_dot_v1_dot_vortex__pb2.InviteUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.VerifyInvitedUser = channel.unary_unary(
                '/blueapi.vortex.v1.Vortex/VerifyInvitedUser',
                request_serializer=vortex_dot_v1_dot_vortex__pb2.VerifyInvitedUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class VortexServicer(object):
    """Vortex service definition.
    """

    def Test(self, request, context):
        """Test endpoint only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrg(self, request, context):
        """Create an org in Vortex
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPrompts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InviteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyInvitedUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VortexServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=vortex_dot_v1_dot_vortex__pb2.TestResponse.SerializeToString,
            ),
            'CreateOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrg,
                    request_deserializer=vortex_dot_v1_dot_vortex__pb2.CreateOrgRequest.FromString,
                    response_serializer=vortex_dot_v1_dot_vortex__pb2.CreateOrgResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=vortex_dot_v1_dot_vortex__pb2.GetUserRequest.FromString,
                    response_serializer=vortex_dot_v1_dot_vortex__pb2.GetUserResponse.SerializeToString,
            ),
            'ListPrompts': grpc.unary_stream_rpc_method_handler(
                    servicer.ListPrompts,
                    request_deserializer=vortex_dot_v1_dot_vortex__pb2.ListPromptsRequest.FromString,
                    response_serializer=vortex_dot_v1_dot_vortex__pb2.Prompt.SerializeToString,
            ),
            'InviteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.InviteUser,
                    request_deserializer=vortex_dot_v1_dot_vortex__pb2.InviteUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'VerifyInvitedUser': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyInvitedUser,
                    request_deserializer=vortex_dot_v1_dot_vortex__pb2.VerifyInvitedUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blueapi.vortex.v1.Vortex', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('blueapi.vortex.v1.Vortex', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Vortex(object):
    """Vortex service definition.
    """

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/Test',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            vortex_dot_v1_dot_vortex__pb2.TestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/CreateOrg',
            vortex_dot_v1_dot_vortex__pb2.CreateOrgRequest.SerializeToString,
            vortex_dot_v1_dot_vortex__pb2.CreateOrgResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/GetUser',
            vortex_dot_v1_dot_vortex__pb2.GetUserRequest.SerializeToString,
            vortex_dot_v1_dot_vortex__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPrompts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/ListPrompts',
            vortex_dot_v1_dot_vortex__pb2.ListPromptsRequest.SerializeToString,
            vortex_dot_v1_dot_vortex__pb2.Prompt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InviteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/InviteUser',
            vortex_dot_v1_dot_vortex__pb2.InviteUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyInvitedUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blueapi.vortex.v1.Vortex/VerifyInvitedUser',
            vortex_dot_v1_dot_vortex__pb2.VerifyInvitedUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
